##begin config
basename OpenAL
version 45.02
date 01.02.2018
##end config
##begin cdef

#include <AL/al.h>
#include <AL/alc.h>

##end cdef
## begin functionlist
# Functions from alc.h
# Context management.
ALCcontext *alcCreateContext(ALCdevice *device, const ALCint* attrlist)
ALCboolean alcMakeContextCurrent(ALCcontext *context)
void alcProcessContext(ALCcontext *context)
void alcSuspendContext(ALCcontext *context)
void alcDestroyContext(ALCcontext *context)
ALCcontext *alcGetCurrentContext(void)
ALCdevice * alcGetContextsDevice(ALCcontext *context)
.skip 5
# Device management.
ALCdevice *alcOpenDevice(const ALCchar *devicename)
ALCboolean alcCloseDevice(ALCdevice *device)
.skip 2
# Error support.
ALCenum alcGetError(ALCdevice *device)
.skip 1
# Extension support.
ALCboolean alcIsExtensionPresent(ALCdevice *device, const ALCchar *extname)
void *alcGetProcAddress(ALCdevice *device, const ALCchar *funcname)
ALCenum alcGetEnumValue(ALCdevice *device, const ALCchar *enumname)
.skip 2
# Query function.
const ALCchar *alcGetString(ALCdevice *device, ALCenum param)
void alcGetIntegerv(ALCdevice *device, ALCenum param, ALCsizei size, ALCint *values)
.skip 2
# Capture function.
ALCdevice *alcCaptureOpenDevice(const ALCchar *devicename, ALCuint frequency, ALCenum format, ALCsizei buffersize)
ALCboolean alcCaptureCloseDevice(ALCdevice *device)
void alcCaptureStart(ALCdevice *device)
void alcCaptureStop(ALCdevice *device)
void alcCaptureSamples(ALCdevice *device, ALCvoid *buffer, ALCsizei samples)
.skip 10
# Functions from al.h
void alDopplerFactor(ALfloat value)
# Doppler velocity (deprecated).
void alDopplerVelocity(ALfloat value)
.skip 2
# Speed of Sound, in units per second.
void alSpeedOfSound(ALfloat value)
# Distance attenuation model.
void alDistanceModel(ALenum distanceModel)
# Renderer State management.
void alEnable(ALenum capability)
void alDisable(ALenum capability)
ALboolean alIsEnabled(ALenum capability)
# State retrieval.
const ALchar* alGetString(ALenum param)
void alGetBooleanv(ALenum param, ALboolean *values)
void alGetIntegerv(ALenum param, ALint *values)
void alGetFloatv(ALenum param, ALfloat *values)
void alGetDoublev(ALenum param, ALdouble *values)
ALboolean alGetBoolean(ALenum param)
ALint alGetInteger(ALenum param)
ALfloat alGetFloat(ALenum param)
ALdouble alGetDouble(ALenum param)
.skip 5
# Error retrieval.
ALenum alGetError(void)
.skip 1
# Extension support.
ALboolean alIsExtensionPresent(const ALchar *extname)
void* alGetProcAddress(const ALchar *fname)
ALenum alGetEnumValue(const ALchar *ename)
.skip 2
# Set Listener parameters
void alListenerf(ALenum param, ALfloat value)
void alListener3f(ALenum param, ALfloat value1, ALfloat value2, ALfloat value3)
void alListenerfv(ALenum param, const ALfloat *values)
void alListeneri(ALenum param, ALint value)
void alListener3i(ALenum param, ALint value1, ALint value2, ALint value3)
void alListeneriv(ALenum param, const ALint *values)
# Get Listener parameters
void alGetListenerf(ALenum param, ALfloat *value)
void alGetListener3f(ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3)
void alGetListenerfv(ALenum param, ALfloat *values)
void alGetListeneri(ALenum param, ALint *value)
void alGetListener3i(ALenum param, ALint *value1, ALint *value2, ALint *value3)
void alGetListeneriv(ALenum param, ALint *values)
.skip 5
# Create Source objects.
void alGenSources(ALsizei n, ALuint *sources)
# Delete Source objects.
void alDeleteSources(ALsizei n, const ALuint *sources)
# Verify a handle is a valid Source.
ALboolean alIsSource(ALuint source)
.skip 2
# Set Source parameters.
void alSourcef(ALuint source, ALenum param, ALfloat value)
void alSource3f(ALuint source, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3)
void alSourcefv(ALuint source, ALenum param, const ALfloat *values)
void alSourcei(ALuint source, ALenum param, ALint value)
void alSource3i(ALuint source, ALenum param, ALint value1, ALint value2, ALint value3)
void alSourceiv(ALuint source, ALenum param, const ALint *values)
# Get Source parameters.
void alGetSourcef(ALuint source, ALenum param, ALfloat *value)
void alGetSource3f(ALuint source, ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3)
void alGetSourcefv(ALuint source, ALenum param, ALfloat *values)
void alGetSourcei(ALuint source,  ALenum param, ALint *value)
void alGetSource3i(ALuint source, ALenum param, ALint *value1, ALint *value2, ALint *value3)
void alGetSourceiv(ALuint source,  ALenum param, ALint *values)
# Play, replay, or resume (if paused) a list of Sources
void alSourcePlayv(ALsizei n, const ALuint *sources)
# Stop a list of Sources
void alSourceStopv(ALsizei n, const ALuint *sources)
# Rewind a list of Sources
void alSourceRewindv(ALsizei n, const ALuint *sources)
# Pause a list of Sources
void alSourcePausev(ALsizei n, const ALuint *sources)
# Play, replay, or resume a Source
void alSourcePlay(ALuint source)
# Stop a Source
void alSourceStop(ALuint source)
# Rewind a Source (set playback postiton to beginning)
void alSourceRewind(ALuint source)
# Pause a Source
void alSourcePause(ALuint source)
# Queue buffers onto a source
void alSourceQueueBuffers(ALuint source, ALsizei nb, const ALuint *buffers)
# Unqueue processed buffers from a source
void alSourceUnqueueBuffers(ALuint source, ALsizei nb, ALuint *buffers)
.skip 5
# Create Buffer objects
void alGenBuffers(ALsizei n, ALuint *buffers)
# Delete Buffer objects
void alDeleteBuffers(ALsizei n, const ALuint *buffers)
# Verify a handle is a valid Buffer
ALboolean alIsBuffer(ALuint buffer)
# Specifies the data to be copied into a buffer
void alBufferData(ALuint buffer, ALenum format, const ALvoid *data, ALsizei size, ALsizei freq)
# Set Buffer parameters
void alBufferf(ALuint buffer, ALenum param, ALfloat value)
void alBuffer3f(ALuint buffer, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3)
void alBufferfv(ALuint buffer, ALenum param, const ALfloat *values)
void alBufferi(ALuint buffer, ALenum param, ALint value)
void alBuffer3i(ALuint buffer, ALenum param, ALint value1, ALint value2, ALint value3)
void alBufferiv(ALuint buffer, ALenum param, const ALint *values)
# Get Buffer parameters
void alGetBufferf(ALuint buffer, ALenum param, ALfloat *value)
void alGetBuffer3f(ALuint buffer, ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3)
void alGetBufferfv(ALuint buffer, ALenum param, ALfloat *values)
void alGetBufferi(ALuint buffer, ALenum param, ALint *value)
void alGetBuffer3i(ALuint buffer, ALenum param, ALint *value1, ALint *value2, ALint *value3)
void alGetBufferiv(ALuint buffer, ALenum param, ALint *values)
## end functionlist
