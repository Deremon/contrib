INDEX
=====

1. What is this?
2. What is and how to build a cross compiler for AROS?
3. What is and how to build a native compiler for AROS?
4. Contact

------------------------------------------------------------------------

1. What is this?

  This directory contains patches against the gcc source tree. Patches
  follow the same naming convention as the gcc releases, plus a trailing 
  "-aros.diff" (without quotes).

2. What is and how to build a cross compiler for AROS?

  A cross compiler is a compiler able to produce binaries usable by a 
  "target" system, which however runs on a different system than the 
  target one. This is useful to speed up development, in case the 
  "host" system is faster than the "target" one, or if the "host" 
  system has any other advantages over the "target" one.
  
  In our case the target system is AROS, and to produce a crosscompiler 
  for AROS you need to go trough the following steps:
  
  1) Decide which patch you want to apply

  2) Download the archive to which the patch you chosed applies. You 
     can find such archives at one of the sites listed at 
     http://www.gnu.org/software/gcc/releases.html
     
  3) Apply the patch 

  4) Prepare a build tree for gcc, so that you can then "configure" it
  
  5) Configure gcc like described in its documentation, but taking care
     of specifying the following parameters:
     
     --target=<cpu>-aros --enable-sjlj-exceptions --enable-long-long
     --with-headers=<path/to/AROS/headers> --with-libs=<path/to/AROS/libs>

     replace the various <...> with the proper values.
     
  6) Type "make" and then "make install", 
  
- IMPORTANT: to be able to build the compiler you need to have built the 
             linker and related utilities first. Such tools are part of the 
             "binutils" package, which is compilable for AROS out of the box
	     (no need for patches). Get the latest version from
	     http://www.gnu.org/software/binutils/
	     
- IMPORTANT2: to be able to produce working AROS executables, you also
              need a tool named collect-aros, which is part of the 
	      AROS build system, and thus can be found, once AROS is 
              compiled, under bin/<host>-<cpu>/tools/ OR in the 
              AROS-SDK package downloadable from 
	      http://www.aros.org/download.php. Make sure that 
              collect-aros is in the PATH, so that the compiler can 
              access it.

3. What is and how to build a native compiler for AROS?

  As opposed to a crosscompiler, a native compiler runs on the same 
  system the compiler is targetted for, that is the "host" and the 
  "target" are the same.
  
  Currently there's no way to build a native compiler from inside AROS
  itself, thus you need to use another operating system as the "build"
  system, and for this purpose you need to build a crosscompiler and
  the cross-binutils before trying to build the native compiler.
  For this, refer to section 2.
  
  Assuming you've got the crosscompiler and related utilities built 
  already, follow the below procedure in order to build a native 
  compiler:
  
    1) CD into gcc's source directory and run the "config.guess"
       script you find there. Note its output, you'll need it
       in a few seconds. On an i686-linux system it should be
       something like "i686-pc-linug-gnu".
       
    2) Now it comes a bit tricky part: you need to prefix the names
       of all tools involved in the build process with the text that
       you've noted in the previous step. This is so because the 
       build process will not be looking for, say, "gcc", but rather,
       in the example above, "i686-pc-linux-gnu-gcc".
       
       I don't suggest you to really rename the executables, because
       then you would have to always invoke them with the new names, 
       what I suggest you is to make symlinks to the various 
       executables. For example:
       
         $ ln -s /usr/bin/gcc /usr/bin/i686-pc-linux-gnu-gcc
	 
       If for any reasons you can't create the symlinks in /usr/bin, 
       create them wherever you want, as long as the place you chose
       is in the PATH. 
       
       The names of the executables you need to create links for are, in 
       sparse order: as, nm, objcopy, ld, gcc, ar, ranlib.
       
       I might have forgotten some, but you will notice because the 
       build process will stop and tell you it can't find a given 
       executable file: simply take note of that file, make
       the needed symlink, and run "make" again.
       
    3) Now proceed with configuring gcc like at point 2.5 above, except
       that you now also need to use the following options:
       
         --host=<cpu>-aros --build=<output of config.guess>
	 --prefix=<prefix for the gcc installation, from the AROS point of view>
	 
       Again, <output of config.guess> refers to the output of 
       the config.guess script you've taken note of at step 3.1.
       
       <prefix for...> refers to the prefix, from the AROS point of 
       view, which will be put before the names of all the directories
       the build system will install files and executables in. 
       For instance, the gcc executable will be installed in 
       <prefix>/bin, thus if you set the prefix to "GCC:" (or /GCC), for 
       instance, then the gcc executable will be installed in GCC:/bin
       (or /GCC/bin), which actually is the same as GCC:bin (from gcc's
       point of view, which uses some unix path conversion routines built
       in the  AROS libc). Feel free to set that prefix to whatever you want.
       
    4) Type "make", without quotes.
    
    5) Type "make install prefix=<XXX> exec_prefix=<XXX>", without 
       quotes.
       
       <XXX> refers to the prefix, from the BUILD SYSTEM
       point of view, which will be put before the names of all 
       directories the build system will install files and executables
       in. This *must* be the same prefix that you specified at 
       configuration time, except that this time it must be specified
       as seen by the build system. However, If at configuration time
       you used a volume name as prefix, then at this stage you can
       specify whatever prefix you want, as long as you take care
       of mounting the previously specified volume in AROS, or 
       assigning it to the directory where gcc's stuff really is.
  
  IMPORTANT: You still need the native binutils if you want to 
             do anything with the native compiler. The steps you need
	     to go trough to build the native binutils are pretty much
	     the same as the ones for gcc, except you needn't apply
	     any patches, as the AROS support for the binutils is 
             already in the main archive. All that was said about the
	     "prefix" stuff still applies for the binutils as well.

  IMPORTANT2: You need to build also collect-aros, natively for AROS. 
              In order to do this, you will have to use the 
              crosscompiler and build it by yourself. It's not
	      hard, really, but at the moment there are no instructions
	      on how to do so. You basically need to use the "bfd" 
              backend, and the "spawn" version of docommand, and then
	      link with libiberty.a and libbfd.a.

4. Contact

If you need to blame someone for how crappy this gcc port is, then by 
any means blame Fabio Alemagna <falemagn@studenti.unina.it>. Feel free 
to also ask normal questions, though :-)	      