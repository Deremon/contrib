####################################################################
####################################################################
############# THIS IS A GENERATED FILE ! DO NOT EDIT ###############
####################################################################
####################################################################
include $(TOP)/config/make.cfg
# Things you might add to DEFS (configure usually figures out what to do):
# -DGNU_STANDARD        Behave as gzip even if invoked as gunzip (GNU standard)
# -DDIRENT              Use <dirent.h>  for recursion (-r)
# -DSYSDIR              Use <sys/dir.h> for recursion (-r)
# -DSYSNDIR             Use <sys/ndir.h> for recursion (-r)
# -DNDIR                Use <ndir.h> for recursion (-r)
# -DSTDC_HEADERS        Use <stdlib.h>
# -DHAVE_UNISTD_H	Use <unistd.h>
# -DNO_FCNTL_H          Don't use <fcntl.h>
# -DNO_UTIME_H		Don't use <utime.h>
# -DHAVE_SYSUTIME_H	Use <sys/utime.h>
# -DNO_MEMORY_H         Don't use <memory.h>. Not needed if STDC_HEADERS.
# -DNO_STRING_H         Use strings.h, not string.h. Not needed if STDC_HEADERS
# -DRETSIGTYPE=int      Define this if signal handlers must return an int.
# -DNO_SYMLINK          OS defines S_IFLNK but does not support symbolic links
# -DNO_MULTIPLE_DOTS    System does not allow file names with multiple dots
# -DNO_UTIME		System does not support setting file modification time
# -DNO_CHOWN		System does not support setting file owner
# -DNO_DIR		System does not support readdir()
# -DPROTO		Force function prototypes even if __STDC__ not defined
# -DASMV		Use asm version match.S
# -DMSDOS		MSDOS specific
# -DOS2			OS/2 specific
# -DVAXC		Vax/VMS with Vax C compiler
# -DVMS			Vax/VMS with gcc
# -DDEBUG		Debug code
# -DDYN_ALLOC		Use dynamic allocation of large data structures
# -DMAXSEG_64K		Maximum array size is 64K (for 16 bit system)
# -DRECORD_IO           read() and write() are rounded to record sizes.
# -DNO_STDIN_FSTAT      fstat() is not available on stdin
# -DNO_FSTAT            fstat() is not available
# -DNO_SIZE_CHECK       stat() does not give a reliable file size

DEFS =  -DHAVE_UNISTD_H=1 -DDIRENT=1  -DNO_UNDERLINE=1 -DASMV=1 -DNO_CHOWN=1

FILES = gzip zip deflate trees bits unzip inflate util crypt\
       lzw unlzw unpack unlzh getopt match


EXEDIR := $(CONTRIBDIR)/gnu
EXE    := $(EXEDIR)/gzip

USE_CLIB := yes
USE_MLIB := yes

USER_CFLAGS := -O2 -Wunused -Wall $(DEFS)

#MM- contrib-gnu-gzip : gzip
#MM- contrib-gnu      : gzip
#MM
gzip : setup $(EXE)

$(OBJDIR)/%.o: %.S
	@$(ECHO) "Compiling $(CURDIR)/$<..."
	@$(IF) $(CC) $(USER_CFLAGS) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(CURDIR)/$<: $(CC) $(USER_CFLAGS) -c $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(CC) $(USER_CFLAGS) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

.PHONY : gzip gzip-clean gzip-quick
#MM
gzip-clean : clean
#MM
gzip-quick : gzip

ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif





LIBS := -L$(LIBDIR) 
DEPLIBS :=
STARTUP := $(LIBDIR)/startup.o

ifdef USE_AROSLIB
LIBS := $(LIBS) -larossupport
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libarossupport.a
endif
ifdef USE_AMIGALIB
LIBS := $(LIBS) -lamiga
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libamiga.a
endif
ifdef USE_ZLIB
LIBS := $(LIBS) -larosz
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libarosz.a
endif
ifdef USE_CLIB
LIBS := $(LIBS) -larosc
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libarosc.a
endif
ifdef USE_MLIB
LIBS := $(LIBS) -larosm
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libarosm.a
endif
ifdef USE_BGUILIB
LIBS := $(LIBS) -lbgui
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libbgui.a
endif
ifdef USE_REQTOOLSLIB
LIBS := $(LIBS) -lreqtoolsstubs
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libreqtoolsstubs.a
endif
ifdef USE_COOLIMAGESLIB
LIBS := $(LIBS) -lcoolimages
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libcoolimages.a
endif
LIBS := $(LIBS) 


CFLAGS  := $(TARGET_CFLAGS) $(USER_CFLAGS) $(STATIC_CFLAGS) -I$(AROS_INCLUDES) -D__AROS -D__AROS__
LDFLAGS := $(TARGET_LDFLAGS) $(STATIC_LDFLAGS) $(USER_LDFLAGS)

OBJS := $(foreach f,$(FILES),$(OBJDIR)/$(f).o)
DEPS := $(foreach f,$(FILES),$(OBJDIR)/$(f).d)

$(OBJDIR)/%.o : %.c
		@$(ECHO) "Compiling $(CURDIR)/$<..."
	@$(IF) $(TARGET_CC) $(CFLAGS) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(CURDIR)/$<: $(TARGET_CC) $(CFLAGS) -c $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TARGET_CC) $(CFLAGS) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi


$(OBJDIR)/%.d : %.c
		@$(IF) [ ! -d $(@D) ]; then $(MKDIR) $(@D) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$<..."
	@$(MKDEPEND) $(CFLAGS) $< -o $@


$(EXEDIR)/% : $(STARTUP) $(DEPLIBS)

setup ::
		@$(FOR) dir in $(OBJDIR) $(EXEDIR) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done


clean ::
	-@$(RM) $(OBJDIR)



$(EXE) : $(EXEDIR)/% : $(OBJS)
		@$(ECHO) "Linking $@..."
	@$(IF) $(STATIC_LD) $(LDFLAGS) $(STARTUP) $^ -o $@ $(LIBS) 2>&1 > $(GENDIR)/cerrors 2>&1 ; then \
		$(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
				$(ECHO) "$@: $(STATIC_LD) $(LDFLAGS) $(STARTUP) $^ -o $@ $(LIBS)" >> $(GENDIR)/errors ; \
				$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	   	else \
			$(NOP) ; \
    	fi ; \
	else \
	    $(ECHO) "Link failed: $(STATIC_LD) $(LDFLAGS) $(STARTUP) $^ -o $@ $(LIBS)" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi



# Delete generated makefiles
clean ::
	@$(RM) $(TOP)/$(CURDIR)/mmakefile $(TOP)/$(CURDIR)/mmakefile.bak

# Include these files but only if the current target is neither
# setup nor clean.
ifeq (,$(filter clean% %clean %clean% setup% includes% ,$(TARGET)))
-include $(DEPS)
endif

