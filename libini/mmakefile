# $Id$

include $(TOP)/config/make.cfg

INILBFILES := \
    _iniDump \
    _iniObjectRead \
    _iniPropertyRead \
    _iniScanUntilObject

FUNCS := \
    iniAllTrim \
    iniAppend \
    iniClose \
    iniCommit \
    iniCursor \
    iniDelete \
    iniElement \
    iniElementCount \
    iniGetBookmark \
    iniGotoBookmark \
    iniObject \
    iniObjectDelete \
    iniObjectEOL \
    iniObjectFirst \
    iniObjectInsert \
    iniObjectLast \
    iniObjectNext \
    iniObjectSeek \
    iniObjectSeekSure \
    iniObjectUpdate \
    iniOpen \
    iniProperty \
    iniPropertyDelete \
    iniPropertyEOL \
    iniPropertyFirst \
    iniPropertyInsert \
    iniPropertyLast \
    iniPropertyNext \
    iniPropertySeek \
    iniPropertySeekSure \
    iniPropertyUpdate \
    iniPropertyValue \
    iniToUpper \
    iniValue

#MM workbench-libs-inifile-includes : \
#MM     includes-copy
#MM- workbench-libs-inifile-module : linklibs

USER_CFLAGS := -I./ -I./include


BDID := $(BDID)_
ifneq ($(filter $(TARGET),workbench-libs-inifile-module workbench-libs-inifile-module-includes workbench-libs-inifile-module-setup workbench-libs-inifile-module-clean workbench-libs-inifile-module-quick workbench-libs-inifile-module-kobj),)
BDTARGETID := $(BDID)
endif

.PHONY : setup-module$(BDID) workbench-libs-inifile-module workbench-libs-inifile-module-includes workbench-libs-inifile-module-setup workbench-libs-inifile-module-clean workbench-libs-inifile-module-quick workbench-libs-inifile-module-kobj

ifeq (inifile,)
$(error using %build_module: modname may not be empty)
endif
ifeq (library,)
$(error using %build_module: $(MODTYPE) has to be defined with the type of the module)
endif

# assign and generate the local variables used in this macro
BD_MODNAME$(BDID)    := inifile
BD_MODTYPE$(BDID)    := library
BD_CONFFILE$(BDID)   := $(BD_MODNAME$(BDID)).conf
OBJDIR               ?= $(GENDIR)/$(CURDIR)
BD_OBJDIR$(BDID)     := $(OBJDIR)

BD_FILES$(BDID)      := inifile_init $(INILBFILES) $(FUNCS)
BD_LIBFILES$(BDID)   := 
BD_STARTFILE$(BDID)  := $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_start
BD_ENDFILE$(BDID)    := $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_end

BD_OBJS$(BDID)       := $(addsuffix .o,$(addprefix $(BD_OBJDIR$(BDID))/,$(notdir $(BD_FILES$(BDID)))))
BD_STARTOBJ$(BDID)   := $(addsuffix .o,$(BD_STARTFILE$(BDID)))
BD_ENDOBJ$(BDID)     := $(addsuffix .o,$(BD_ENDFILE$(BDID)))

BD_DEPS$(BDID)       := $(patsubst %.o,%.d,$(BD_OBJS$(BDID)) $(BD_STARTOBJ$(BDID)) $(BD_ENDOBJ$(BDID)))

BD_REFFILES$(BDID)   := $(addprefix $(BD_OBJDIR$(BDID))/,$(addsuffix .ref, $(notdir $(BD_FILES$(BDID)))))
BD_REFFILE$(BDID)    := $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_ALL.ref

ifeq ($(BD_MODTYPE$(BDID)),library)
BD_GENINCS$(BDID)    := clib/$(BD_MODNAME$(BDID))_protos.h defines/$(BD_MODNAME$(BDID)).h proto/$(BD_MODNAME$(BDID)).h
endif
BD_LIBDEFSINC$(BDID) := $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_libdefs.h

BD_CFLAGS$(BDID)     := $(CFLAGS) -I$(BD_OBJDIR$(BDID)) -idirafter $(TOP)/$(CURDIR) -include $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_deflibdefs.h
ifeq (,)
BD_DFLAGS$(BDID)     := $(BD_CFLAGS$(BDID))
else
BD_DFLAGS$(BDID)     :=  -I$(BD_OBJDIR$(BDID)) -include $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_deflibdefs.h
endif

# Add additional files depending the module type
ifeq ($(findstring $(BD_MODTYPE$(BDID)),library mcc mui mcp),)
    $(error unhandled MODTYPE library)
endif
ifeq ($(BD_MODTYPE$(BDID)),library)
  BD_MODDIR$(BDID)       := $(AROS_LIBS)
  BD_LINKLIBFILES$(BDID)   := $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_autoinit.c 
  BD_LINKLIBOBJS$(BDID)    := $(addprefix $(BD_OBJDIR$(BDID))/,$(addsuffix .o,$(BD_LIBFILES$(BDID)))) \
  	                    $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_autoinit.o 
  BD_LINKLIBGENFILES$(BDID):= $(LIBDIR)/lib$(BD_MODNAME$(BDID)).a

ifeq ($(BD_OBJDIR$(BDID)),)
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_autoinit
else
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(notdir $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_autoinit)
endif

ifeq ($(findstring target,host target),)
  $(error unknown compiler target)
endif
ifeq (target,target)
$(TMP_TARGETBASE).o : TMP_CMD:=$(TARGET_CC)
endif
ifeq (target,host)
$(TMP_TARGETBASE).o : TMP_CMD:=$(HOST_CC)
endif

$(TMP_TARGETBASE).o : $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_autoinit.c
	@$(ECHO) "Compiling $(notdir $<)"
	@$(IF) $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

ifeq ($(BD_DFLAGS$(BDID)),)
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_CFLAGS$(BDID))
else
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_DFLAGS$(BDID))
endif
$(TMP_TARGETBASE).d : $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_autoinit.c
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@$(MKDEPEND) $(TMP_DFLAGS) $< -o $@
endif

ifneq ($(findstring $(BD_MODTYPE$(BDID)),mcc mui mcp),)
  BD_MODDIR$(BDID)       := $(AROS_CLASSES)/Zune
  BD_OBJS$(BDID)         += $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_mcc_query.o \
                            $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_mcc_init.o
  BD_LINKLIBGENFILES$(BDID):= 

ifeq ($(BD_OBJDIR$(BDID)),)
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_mcc_query
else
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(notdir $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_mcc_query)
endif

ifeq ($(findstring target,host target),)
  $(error unknown compiler target)
endif
ifeq (target,target)
$(TMP_TARGETBASE).o : TMP_CMD:=$(TARGET_CC)
endif
ifeq (target,host)
$(TMP_TARGETBASE).o : TMP_CMD:=$(HOST_CC)
endif

$(TMP_TARGETBASE).o : $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_mcc_query.c
	@$(ECHO) "Compiling $(notdir $<)"
	@$(IF) $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

ifeq ($(BD_DFLAGS$(BDID)),)
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_CFLAGS$(BDID))
else
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_DFLAGS$(BDID))
endif
$(TMP_TARGETBASE).d : $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_mcc_query.c
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@$(MKDEPEND) $(TMP_DFLAGS) $< -o $@

ifeq ($(BD_OBJDIR$(BDID)),)
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_mcc_init
else
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(notdir $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_mcc_init)
endif

ifeq ($(findstring target,host target),)
  $(error unknown compiler target)
endif
ifeq (target,target)
$(TMP_TARGETBASE).o : TMP_CMD:=$(TARGET_CC)
endif
ifeq (target,host)
$(TMP_TARGETBASE).o : TMP_CMD:=$(HOST_CC)
endif

$(TMP_TARGETBASE).o : $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_mcc_init.c
	@$(ECHO) "Compiling $(notdir $<)"
	@$(IF) $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

ifeq ($(BD_DFLAGS$(BDID)),)
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_CFLAGS$(BDID))
else
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_DFLAGS$(BDID))
endif
$(TMP_TARGETBASE).d : $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_mcc_init.c
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@$(MKDEPEND) $(TMP_DFLAGS) $< -o $@
endif

ifneq ($(findstring $(BD_MODTYPE$(BDID)),library mcc),)
  BD_LINKLIBFILES$(BDID)   += $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_stubs.c
  BD_LINKLIBOBJS$(BDID)    += $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_stubs.o
  BD_LINKLIBDEPS$(BDID)    := $(patsubst %.o,%.d,$(BD_LINKLIBOBJS$(BDID))) 

ifeq ($(BD_OBJDIR$(BDID)),)
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_stubs
else
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(notdir $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_stubs)
endif

ifeq ($(findstring target,host target),)
  $(error unknown compiler target)
endif
ifeq (target,target)
$(TMP_TARGETBASE).o : TMP_CMD:=$(TARGET_CC)
endif
ifeq (target,host)
$(TMP_TARGETBASE).o : TMP_CMD:=$(HOST_CC)
endif

$(TMP_TARGETBASE).o : $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_stubs.c
	@$(ECHO) "Compiling $(notdir $<)"
	@$(IF) $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

ifeq ($(BD_DFLAGS$(BDID)),)
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_CFLAGS$(BDID))
else
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_DFLAGS$(BDID))
endif
$(TMP_TARGETBASE).d : $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_stubs.c
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@$(MKDEPEND) $(TMP_DFLAGS) $< -o $@
endif

BD_MODULE$(BDID)    := $(BD_MODDIR$(BDID))/$(BD_MODNAME$(BDID)).$(BD_MODTYPE$(BDID))
BD_GENFILES$(BDID)  := $(BD_MODULE$(BDID)) $(BD_LINKLIBGENFILES$(BDID))
BD_DEPS$(BDID)      += $(BD_LINKLIBDEPS$(BDID))

# What are the files that need to be generated before the .d and .ref files
# can be generated ?
BD_REFFILE_DEPS$(BDID) := $(BD_LIBDEFSINC$(BDID)) $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_deflibdefs.h
ifeq ($(BD_MODTYPE$(BDID)),library)
  BD_REFFILE_DEPS$(BDID) += $(addprefix $(BD_OBJDIR$(BDID))/dummyinc/,$(BD_GENINCS$(BDID)))
endif
BD_DFILE_DEPS$(BDID) := $(BD_LIBDEFSINC$(BDID)) $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_deflibdefs.h
ifeq ($(BD_MODTYPE$(BDID)),library)
  BD_DFILE_DEPS$(BDID) += $(addprefix $(INCDIR)/,$(BD_GENINCS$(BDID)))
endif

#MM workbench-libs-inifile-module : workbench-libs-inifile-module-includes
#MM workbench-libs-inifile-module-kobj : workbench-libs-inifile-module-includes
#MM workbench-libs-inifile-module-includes : workbench-libs-inifile-module-setup

#MM
workbench-libs-inifile-module-quick : workbench-libs-inifile-module

#MM
workbench-libs-inifile-module : $(BD_GENFILES$(BDID))

#MM
workbench-libs-inifile-module-includes : $(addprefix $(AROS_INCLUDES)/,$(BD_GENINCS$(BDID)))

#MM
workbench-libs-inifile-module-clean ::
	@$(ECHO) "Cleaning up for module $(BD_MODNAME$(BDID))"
	@$(RM) $(BD_OBJS$(BDID)) $(BD_DEPS$(BDID)) $(BD_REFFILE$(BDID)) \
	    $(BD_REFFILES$(BDID))\
	    $(addprefix $(BD_OBJDIR$(BDID))/,$(addsuffix .c,$(BD_GENFILES$(BDID)))) \
	    $(addprefix $(GENINCDIR)/,$(BD_GENINCS$(BDID))) \
	    $(addprefix $(AROS_INCLUDES)/,$(BD_GENINCS$(BDID))) \
	    $(BD_LINKLIBFILES$(BDID)) $(BD_LINKLIBOBJS$(BDID)) $(BD_LIBDEFSINC$(BDID)) \
	    $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_deflibdefs.h \
	    $(addsuffix .c,$(BD_STARTFILE$(BDID)) $(BD_ENDFILE$(BDID))) \
	    $(BD_STARTOBJ$(BDID)) $(BD_ENDOBJ$(BDID))

#MM
workbench-libs-inifile-module-setup : setup-module$(BDID)

ifneq ($(filter $(TARGET),workbench-libs-inifile-module workbench-libs-inifile-module-includes workbench-libs-inifile-module-quick workbench-libs-inifile-module-kobj),) # Avoid conflicts
ifneq ($(dir $(BD_FILES$(BDID))),./)
vpath %.c $(filter-out ./,$(dir $(BD_FILES$(BDID))))
endif


ifeq ($(BD_OBJDIR$(BDID)),)
  TMP_TARGETBASE := %
else
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(notdir %)
endif

ifeq ($(findstring target,host target),)
  $(error unknown compiler target)
endif
ifeq (target,target)
$(TMP_TARGETBASE).o : TMP_CMD:=$(TARGET_CC)
endif
ifeq (target,host)
$(TMP_TARGETBASE).o : TMP_CMD:=$(HOST_CC)
endif

$(TMP_TARGETBASE).o : %.c
	@$(ECHO) "Compiling $(notdir $<)"
	@$(IF) $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

ifeq ($(BD_DFLAGS$(BDID)),)
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_CFLAGS$(BDID))
else
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_DFLAGS$(BDID))
endif
$(TMP_TARGETBASE).d : %.c
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@$(MKDEPEND) $(TMP_DFLAGS) $< -o $@

ifeq ($(BD_OBJDIR$(BDID)),)
GENFILE_TMP := %.ref
else
GENFILE_TMP := $(BD_OBJDIR$(BDID))/$(notdir %).ref
endif

ifeq ($(filter target,target host),)
$(error use of %rule_ref: compiler has to be 'host' or 'target')
endif

ifeq (target,target)
$(GENFILE_TMP) : CC:=$(TARGET_CC)
else
$(GENFILE_TMP) : CC:=$(HOST_CC)
endif

$(GENFILE_TMP) : %.c $(CXREF) 
	@$(ECHO) "Generating $(notdir $@)..."
ifeq (,)
	@$(CXREF) -raw -CPP '$(CC) -I$(dir $(GENMODULE))/genmod_inc -I$(BD_OBJDIR$(BDID))/dummyinc $(strip $(BD_CFLAGS$(BDID))) -E -C -dD' $< >$@
else
	@$(CXREF) -raw -CPP '$(CC) -I$(dir $(GENMODULE))/genmod_inc -I$(BD_OBJDIR$(BDID))/dummyinc $(strip $(BD_CFLAGS$(BDID))) -include  -E -C -dD' $< >$@
endif


ifeq ($(BD_OBJDIR$(BDID)),)
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_start
else
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(notdir $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_start)
endif

ifeq ($(findstring target,host target),)
  $(error unknown compiler target)
endif
ifeq (target,target)
$(TMP_TARGETBASE).o : TMP_CMD:=$(TARGET_CC)
endif
ifeq (target,host)
$(TMP_TARGETBASE).o : TMP_CMD:=$(HOST_CC)
endif

$(TMP_TARGETBASE).o : $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_start.c
	@$(ECHO) "Compiling $(notdir $<)"
	@$(IF) $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

ifeq ($(BD_DFLAGS$(BDID)),)
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_CFLAGS$(BDID))
else
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_DFLAGS$(BDID))
endif
$(TMP_TARGETBASE).d : $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_start.c
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@$(MKDEPEND) $(TMP_DFLAGS) $< -o $@

ifeq ($(BD_OBJDIR$(BDID)),)
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_end
else
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(notdir $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_end)
endif

ifeq ($(findstring target,host target),)
  $(error unknown compiler target)
endif
ifeq (target,target)
$(TMP_TARGETBASE).o : TMP_CMD:=$(TARGET_CC)
endif
ifeq (target,host)
$(TMP_TARGETBASE).o : TMP_CMD:=$(HOST_CC)
endif

$(TMP_TARGETBASE).o : $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_end.c
	@$(ECHO) "Compiling $(notdir $<)"
	@$(IF) $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

ifeq ($(BD_DFLAGS$(BDID)),)
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_CFLAGS$(BDID))
else
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_DFLAGS$(BDID))
endif
$(TMP_TARGETBASE).d : $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_end.c
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@$(MKDEPEND) $(TMP_DFLAGS) $< -o $@
endif

# Some include files need to be generated before the .c can be parsed.
ifneq ($(filter $(TARGET),workbench-libs-inifile-module workbench-libs-inifile-module-includes workbench-libs-inifile-module-quick workbench-libs-inifile-module-kobj),) # Only for this target these deps are wanted
$(BD_REFFILES$(BDID)) : $(BD_REFFILE_DEPS$(BDID)) $(dir $(GENMODULE))/genmod_inc/aros/libcall.h
$(BD_DEPS$(BDID)) : $(BD_DFILE_DEPS$(BDID))
endif

# Generation of the autogenerated .c and .h files.

GENFILES_TMP := $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_start.c $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_end.c

# Some of the generated files are dependent on the module type.
ifeq ($(BD_MODTYPE$(BDID)),library)
GENFILES_TMP += $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_autoinit.c $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_stubs.c \
                $(GENINCDIR)/clib/$(BD_MODNAME$(BDID))_protos.h \
                $(GENINCDIR)/defines/$(BD_MODNAME$(BDID)).h \
                $(GENINCDIR)/proto/$(BD_MODNAME$(BDID)).h
endif

ifneq ($(findstring $(BD_MODTYPE$(BDID)),mcc mui mcp),)
GENFILES_TMP += $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_stubs.c \
                $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_mcc_query.c \
                $(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_mcc_init.c
endif

$(GENFILES_TMP) : $(BD_CONFFILE$(BDID)) $(GENMODULE) $(BD_REFFILE$(BDID))
	@$(ECHO) "Generating functable and includes for module $(BD_MODNAME$(BDID))"
ifneq ($(BD_CONFFILE$(BDID)),lib.conf)
	@$(IF) $(TEST) -f lib.conf; then \
	  $(ECHO) "WARNING !!! $(CURDIR)/lib.conf may probably be removed"; \
	fi
endif
	@$(IF) $(TEST) -f libdefs.h; then \
	  $(ECHO) "WARNING !!! $(CURDIR)/libdefs.h may probably be removed"; \
	fi
	@$(GENMODULE) $(BD_MODNAME$(BDID)) $(BD_MODTYPE$(BDID)) $(BD_CONFFILE$(BDID)) $(BD_OBJDIR$(BDID)) $(GENINCDIR) $(BD_REFFILE$(BDID))


$(BD_OBJDIR$(BDID))/dummyinc/clib/$(BD_MODNAME$(BDID))_protos.h $(BD_OBJDIR$(BDID))/dummyinc/defines/$(BD_MODNAME$(BDID)).h \
$(BD_OBJDIR$(BDID))/dummyinc/proto/$(BD_MODNAME$(BDID)).h : $(BD_CONFFILE$(BDID)) $(GENMODULEDUMMY)
	@$(ECHO) "Generating $(notdir $@)"
	@$(FOR) dir in $(BD_OBJDIR$(BDID))/dummyinc $(BD_OBJDIR$(BDID))/dummyinc/clib $(BD_OBJDIR$(BDID))/dummyinc/defines $(BD_OBJDIR$(BDID))/dummyinc/proto ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done
	@$(GENMODULEDUMMY) $(BD_MODNAME$(BDID)) $(BD_MODTYPE$(BDID)) $(BD_CONFFILE$(BDID)) $(BD_OBJDIR$(BDID))/dummyinc


$(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_libdefs.h : $(BD_CONFFILE$(BDID)) $(GENLIBDEFS)
	@$(ECHO) "Generating $(notdir $@)"
	@$(GENLIBDEFS) $(BD_MODNAME$(BDID)) $(BD_MODTYPE$(BDID)) $(BD_CONFFILE$(BDID)) $(BD_OBJDIR$(BDID))

$(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_deflibdefs.h :
	@$(ECHO) "generating $@"
	@$(ECHO) "#define LC_LIBDEFS_FILE \"$(BD_LIBDEFSINC$(BDID))\"" >$@

# The module ref file is the joint of all individual .ref files

$(BD_REFFILE$(BDID)) : $(BD_REFFILES$(BDID))
ifneq (Collecting function references for module $(BD_MODNAME$(BDID)),)
	@$(ECHO) Collecting function references for module $(BD_MODNAME$(BDID))
endif
	@$(CAT) $(BD_REFFILES$(BDID)) >$@

# The module is linked from all the compiled .o files

$(BD_MODULE$(BDID)) : $(BD_STARTOBJ$(BDID)) $(BD_OBJS$(BDID)) $(BD_ENDOBJ$(BDID)) $(addprefix $(LIBDIR)/lib,$(addsuffix .a,amiga arosc rom m libinit autoinit))
	@$(ECHO) "Building $(notdir $@) ..."
	@if $(STATIC_LD) $(STATIC_LDFLAGS) $(LDFLAGS) \
	    $(GENMAP) $(OBJDIR)/$(MODULE).map \
	    $(BD_STARTOBJ$(BDID)) $(BD_OBJS$(BDID)) $(addprefix -l,amiga arosc rom m) -llibinit -lautoinit -L/usr/lib $(addprefix -l,) $(BD_ENDOBJ$(BDID)) $(COMPILER_LIBS) \
	    -o $@ 2>&1 > $(OBJDIR)/$(BD_MODNAME).err; \
	then \
	    cat $(OBJDIR)/$(BD_MODNAME).err; \
	else \
	    cat $(OBJDIR)/$(BD_MODNAME).err; \
	    exit 1; \
	fi

	@if $(TEST) ! -s $(OBJDIR)/$(BD_MODNAME).err ; then $(RM) $(OBJDIR)/$(BD_MODNAME).err ; fi
	@$(STRIP) $@


# The include files generated in $(GENINCDIR) have to be mirrored in the AROS include directory
ifeq ($(BD_MODTYPE$(BDID)),library)
$(INCDIR)/clib/$(BD_MODNAME$(BDID))_protos.h : $(GENINCDIR)/clib/$(BD_MODNAME$(BDID))_protos.h
	@$(CP) $< $@
$(INCDIR)/defines/$(BD_MODNAME$(BDID)).h : $(GENINCDIR)/defines/$(BD_MODNAME$(BDID)).h
	@$(CP) $< $@
$(INCDIR)/inline/$(BD_MODNAME$(BDID)).h : $(GENINCDIR)/inline/$(BD_MODNAME$(BDID)).h
	@$(CP) $< $@
$(INCDIR)/pragmas/$(BD_MODNAME$(BDID)).h : $(GENINCDIR)/pragmas/$(BD_MODNAME$(BDID)).h
	@$(CP) $< $@
$(INCDIR)/proto/$(BD_MODNAME$(BDID)).h : $(GENINCDIR)/proto/$(BD_MODNAME$(BDID)).h
	@$(CP) $< $@
endif

# For a shared library also build a static link lib
ifeq ($(BD_MODTYPE$(BDID)),library)

$(LIBDIR)/lib$(BD_MODNAME$(BDID)).a : $(BD_LINKLIBOBJS$(BDID))
	@$(ECHO) "Creating library $@..."
	@$(AR) $@ $^
	@$(RANLIB) $@
endif


setup-module$(BDID) :: $(BD_OBJDIR$(BDID)) $(BD_OBJDIR$(BDID))/dummyinc/defines $(BD_OBJDIR$(BDID))/dummyinc/proto $(BD_OBJDIR$(BDID))/dummyinc/clib $(BD_MODDIR$(BDID)) $(KOBJSDIR)

# Only add a rule for a directory for which there is no rule yet.

TOCREATE_TMP := $(filter-out $(CREATED_DIRS_GLOB),$(BD_OBJDIR$(BDID)) $(BD_OBJDIR$(BDID))/dummyinc/defines $(BD_OBJDIR$(BDID))/dummyinc/proto $(BD_OBJDIR$(BDID))/dummyinc/clib $(BD_MODDIR$(BDID)) $(KOBJSDIR))

ifdef TOCREATE_TMP
$(TOCREATE_TMP) :
	@$(ECHO) "Creating directory $@"
	@$(IF) $(TEST) ! -d $@ ; then $(MKDIR) $@ ; else $(NOP) ; fi

  ifdef CREATED_DIRS_GLOB
    CREATED_DIRS_GLOB += $(TOCREATE_TMP)
  else
    CREATED_DIRS_GLOB := $(TOCREATE_TMP)
  endif
endif

workbench-libs-inifile-module-kobj : $(KOBJSDIR)/$(BD_MODNAME$(BDID))_$(BD_MODTYPE$(BDID)).o

$(KOBJSDIR)/$(BD_MODNAME$(BDID))_$(BD_MODTYPE$(BDID)).o : \
$(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_start.o \
$(BD_OBJS$(BDID)) \
$(BD_OBJDIR$(BDID))/$(BD_MODNAME$(BDID))_end.o
	@$(LD) -r -o $@ $^

ifneq ($(BD_DEPS$(BDID)),)
  ifneq (workbench-libs-inifile-module workbench-libs-inifile-module-quick,)
    ifneq ($(findstring $(TARGET),workbench-libs-inifile-module workbench-libs-inifile-module-quick),)
      -include $(BD_DEPS$(BDID))
    endif
  else
    ifeq (,$(filter clean% %clean %clean% setup% includes% %setup,$(TARGET)))
      -include $(BD_DEPS$(BDID))
    endif
  endif
endif
 
# Delete generated makefiles
#MM
clean ::
	@$(RM) $(TOP)/$(CURDIR)/mmakefile $(TOP)/$(CURDIR)/mmakefile.bak

include $(TOP)/config/make.tail

BDID := $(BDTARGETID)
