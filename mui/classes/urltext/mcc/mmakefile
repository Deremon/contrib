#   $Id: mmakefile.src 25066 2006-12-10 20:38:45Z mazze $
include $(TOP)/config/make.cfg

#MM contrib-zune-classes-urltext-class : includes linklibs

USER_INCLUDES = -I../../../../../necessary/mui/classes/nlist/commonaros

FILES := Dispatcher \
	 Draw \
	 HandleEvent \
	 NewDispose \
	 Notify \
	 SetGet \
	 SetupCleanup \
	 ShowHide
	 

# Define metamake targets and their dependencies
#MM contrib-zune-classes-urltext-class : core-linklibs includes-generate-deps
#MM contrib-zune-classes-urltext-class-kobj : core-linklibs includes-generate-deps
#MM contrib-zune-classes-urltext-class-quick
#MM contrib-zune-classes-urltext-class-clean

BD_ALLTARGETS := contrib-zune-classes-urltext-class contrib-zune-classes-urltext-class-clean contrib-zune-classes-urltext-class-quick contrib-zune-classes-urltext-class-kobj

.PHONY : $(BD_ALLTARGETS)

ifeq (URLText,)
$(error using %build_module_simple: modname may not be empty)
endif
ifeq (mcc,)
$(error using %build_module_simple: $(MODTYPE) has to be defined with the type of the module)
endif

# Default values for variables and arguments
BD_DEFLINKLIBNAME := URLText
BD_DEFREFFILE := $(OBJDIR)/URLText_ALL.ref
BD_DEFDFLAGS := $(CFLAGS)
OBJDIR ?= $(GENDIR)/$(CURDIR)
BD_MODDIR := $(CONTRIBDIR)/Zune/MCC_URLText/Classes/Zune
ifeq ($(BD_MODDIR),)
  ifeq (mcc,library)
    BD_MODDIR  := $(AROS_LIBS)
  endif
  ifeq (mcc,gadget)
    BD_MODDIR  := $(AROS_GADGETS)
  endif
  ifeq (mcc,datatype)
    BD_MODDIR  := $(AROS_DATATYPES)
  endif
  ifeq (mcc,handler)
    BD_MODDIR  := $(AROS_FS)
  endif
  ifeq (mcc,device)
    BD_MODDIR  := $(AROS_DEVS)
  endif
  ifeq (mcc,resource)
    BD_MODDIR  := $(AROS_RESOURCES)
  endif
  ifeq (mcc,mui)
    BD_MODDIR  := $(AROS_CLASSES)/Zune
  endif
  ifeq (mcc,mcc)
    BD_MODDIR  := $(AROS_CLASSES)/Zune
  endif
  ifeq (mcc,mcp)
    BD_MODDIR  := $(AROS_CLASSES)/Zune
  endif
  ifeq (mcc,hidd)
    BD_MODDIR  := $(AROS_DRIVERS)
  endif
endif
ifeq ($(BD_MODDIR),)
  $(error Don't where to put the file for modtype mcc. Specify moduledir=)
endif


ifeq ($(OBJDIR),)
TMP_TARGETS := $(addsuffix .o,library $(FILES))
TMP_DTARGETS := $(addsuffix .d,library $(FILES))
TMP_WILDCARD := %
else
TMP_TARGETS := $(addsuffix .o,$(addprefix $(OBJDIR)/,$(notdir library $(FILES))))
TMP_DTARGETS := $(addsuffix .d,$(addprefix $(OBJDIR)/,$(notdir library $(FILES))))
TMP_WILDCARD := $(OBJDIR)/%

# Be sure that all .c files are generated
$(TMP_TARGETS) $(TMP_DTARGETS) : | $(addsuffix .c,library $(FILES))

# Be sure that all .c files are found
TMP_DIRS := $(filter-out ./,$(sort $(dir library $(FILES))))
ifneq ($(TMP_DIRS),)
    vpath %.c $(TMP_DIRS)
endif

endif

ifeq ($(findstring target,host target),)
  $(error unknown compiler target)
endif
ifeq (target,target)
$(TMP_TARGETS) $(TMP_DTARGETS) : CMD:=$(TARGET_CC)
endif
ifeq (target,host)
$(TMP_TARGETS) $(TMP_DTARGETS) : CMD:=$(HOST_CC)
endif

$(TMP_TARGETS) : CFLAGS := $(CFLAGS)
$(TMP_TARGETS) : $(TMP_WILDCARD).o : %.c
	@$(ECHO) "Compiling $(notdir $<)"
	@$(IF) $(CMD) $(CFLAGS) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(CMD) $(CFLAGS) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(CMD) $(CFLAGS) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

ifeq ($(BD_DEFDFLASGS),)
$(TMP_DTARGETS) : DFLAGS:=$(CFLAGS)
else
$(TMP_DTARGETS) : DFLAGS:=$(BD_DEFDFLASGS)
endif
$(TMP_DTARGETS) : $(TMP_WILDCARD).d : %.c
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@AROS_CC="$(CMD)" $(MKDEPEND) $(DFLAGS) $< -o $@

BD_MODULE := $(BD_MODDIR)/URLText.mcc
BD_KOBJ := $(KOBJSDIR)/URLText_mcc.o

contrib-zune-classes-urltext-class-quick : contrib-zune-classes-urltext-class
contrib-zune-classes-urltext-class : $(BD_MODULE)
contrib-zune-classes-urltext-class-kobj : $(BD_KOBJ)

# The module is linked from all the compiled .o files
BD_OBJS       := $(addprefix $(OBJDIR)/, $(addsuffix .o,library $(FILES)))

$(BD_MODULE) : OBJS := $(BD_OBJS)
$(BD_MODULE) : ENDTAG := 
$(BD_MODULE) : ERR := URLText.err
$(BD_MODULE) : LIBS := $(addprefix -l,amiga mui rom m) -lautoinit -llibinit -L/usr/lib $(addprefix -l,)
$(BD_MODULE) : $(BD_OBJS)  $(addprefix $(LIBDIR)/lib,$(addsuffix .a,amiga mui rom m libinit autoinit))
	@$(ECHO) "Building $(notdir $@) ..."
	@if $(AROS_CC) $(NOSTARTUP_LDFLAGS) $(LDFLAGS) \
	    $(GENMAP) $(OBJDIR)/$(MODULE).map \
	    $(OBJS) $(LIBS) $(ENDTAG) \
	    -o $@ 2>&1 > $(OBJDIR)/$(ERR); \
	then \
	    cat $(OBJDIR)/$(ERR); \
	else \
	    cat $(OBJDIR)/$(ERR); \
	    exit 1; \
	fi

	@if $(TEST) ! -s $(OBJDIR)/$(ERR) ; then $(RM) $(OBJDIR)/$(ERR) ; fi
	@$(STRIP) $@


# Link kernel object file
BD_KAUTOLIB := workbench dos cybergraphics intuition layers graphics oop utility \
    expansion keymap
BD_KBASE := WorkbenchBase DOSBase CyberGfxBase IntuitionBase LayersBase \
    GfxBase OOPBase UtilityBase ExpansionBase KeymapBase
BD_KLIB := hiddgraphicsstubs hiddstubs amiga arossupport rom arosm autoinit libinit
BD_KOBJ_LIBS := $(filter-out $(BD_KLIB),amiga mui rom m) $(BD_KAUTOLIB)
$(BD_KOBJ) : LINKLIBS:=$(BD_KOBJ_LIBS)
$(BD_KOBJ) : FILTBASES:=$(addprefix -L ,$(BD_KBASE))
$(BD_KOBJ) : $(BD_OBJS) $(BD_ENDOBJS)
	@$(ECHO) "Linking $@"
	@$(AROS_LD) -Ur -o $@ $^ -L$(AROS_LIB) $(addprefix -l,$(LINKLIBS))
	@$(OBJCOPY) $@ $(FILTBASES) `$(NM_PLAIN) $@ | $(AWK) '($$3 ~ /^__.*_(LIST|END)__$$/) || ($$3 ~ /^libraryset_.*$$/) {print "-L " $$3;}'`


## Dependency fine-tuning
##
BD_DEPS       := $(addprefix $(OBJDIR), $(addsuffix .o,library $(FILES)))
ifneq ($(BD_DEPS),)
  ifneq (contrib-zune-classes-urltext-class contrib-zune-classes-urltext-class-quick contrib-zune-classes-urltext-class-kobj,)
    ifneq ($(findstring $(TARGET),contrib-zune-classes-urltext-class contrib-zune-classes-urltext-class-quick contrib-zune-classes-urltext-class-kobj),)
      -include $(BD_DEPS)
    endif
  else
    ifeq (,$(filter clean% %clean %clean% setup% includes% %setup,$(TARGET)))
      -include $(BD_DEPS)
    endif
  endif
endif

$(BD_OBJS) $(BD_DEPS) $(BD_REFS) : | $(OBJDIR)
$(BD_MODULE) : | $(BD_MODDIR)
$(BD_KOBJ) : | $(KOBJSDIR)
GLOB_MKDIRS += $(OBJDIR) $(BD_MODDIR) $(KOBJSDIR)

contrib-zune-classes-urltext-class-clean : FILES := $(BD_OBJS) $(BD_MODULE) $(BD_KOBJ) $(BD_DEPS)
contrib-zune-classes-urltext-class-clean ::
	@$(ECHO) "Cleaning up for module URLText"
	@$(RM) $(BD_OBJS) $(BD_KOBJ)


#MM includes-copy

INCLUDE_FILES := Toolbar_mcc.h

ifneq (,)
INCL_FILES_1 := $(subst ,$(AROS_INCLUDES)/MUI,$(INCLUDE_FILES))
INCL_FILES_2 := $(subst ,$(GENINCDIR)/MUI,$(INCLUDE_FILES))
_INC_PATH := /
else
INCL_FILES_1 := $(foreach f,$(INCLUDE_FILES),$(AROS_INCLUDES)/MUI/$(f))
INCL_FILES_2 := $(foreach f,$(INCLUDE_FILES),$(GENINCDIR)/MUI/$(f))
_INC_PATH :=
endif

#MM includes-copy

ifneq (includes-copy,includes-copy)
#MM
includes-copy : includes-copy
endif

includes-copy : $(INCL_FILES_1) $(INCL_FILES_2)

.PHONY: includes-copy

$(AROS_INCLUDES)/MUI/%.h : $(_INC_PATH)%.h
	@$(CP) $< $@

$(GENINCDIR)/MUI/%.h : $(_INC_PATH)%.h
	@$(CP) $< $@

$(INCL_FILES_1) : | $(AROS_INCLUDES)/MUI
$(INCL_FILES_2) : | $(GENINCDIR)/MUI
GLOB_MKDIRS += $(AROS_INCLUDES)/MUI $(GENINCDIR)/MUI

# Delete generated makefiles
#MM
clean ::
	@$(RM) $(TOP)/$(CURDIR)/mmakefile $(TOP)/$(CURDIR)/mmakefile.bak

include $(TOP)/config/make.tail

BDID := $(BDTARGETID)
